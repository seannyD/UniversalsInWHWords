length(bits[!is.na(bits)])==0
paste(bits[!is.na(bits)],collapse=';')
head(AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)])
EnglishWords = gsub(" $","")
EnglishWords = gsub("\\$","o",EnglishWords)
EnglishWords = gsub(" $","",EnglishWords)
celex$PhonCLX = gsub("\\$","o",celex$PhonCLX)
sapply(AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)], function(X){#
	wx = strsplit(X,",")[[1]]#
	wx = gsub(" ","",wx)#
	bits = sapply(wx,function(Y){#
		x = celex[match(strsplit(Y," ")[[1]],celex$Word),]$PhonCLX#
		return(x[!is.na(x)])#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
})
x = AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)][1]
x
x = AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)][4]
x
x = AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)][5]
x
sapply(x, function(X){#
	wx = strsplit(X,",")[[1]]#
	wx = gsub(" ","",wx)#
	bits = sapply(wx,function(Y){#
		x = celex[match(strsplit(Y," ")[[1]],celex$Word),]$PhonCLX#
		return(x[!is.na(x)])#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
})
X = x
strsplit(X,",")[[1]]
wx = strsplit(X,",")[[1]]
wx = gsub(" ","",wx)
bits = sapply(wx,function(Y){#
		x = celex[match(strsplit(Y," ")[[1]],celex$Word),]$PhonCLX#
		return(x[!is.na(x)])#
		}#
		)
bits
wx
wx = strsplit(X,",")[[1]]
wx
wx = strsplit(X,",")[[1]]
bits = sapply(wx,function(Y){#
		x = celex[match(strsplit(Y," ")[[1]],celex$Word),]$PhonCLX#
		return(x[!is.na(x)])#
		}#
		)
bits
wx
strsplit(X,",")[[1]]
Y = wx
celex[match(strsplit(Y," ")[[1]],celex$Word),]$PhonCLX
"chili" %in% celex$Word
sapply(AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)], function(X){#
	wx = strsplit(X,",")[[1]]#
	bits = sapply(wx,function(Y){#
		x = celex[match(strsplit(Y," ")[[1]],celex$Word),]$PhonCLX#
		return(x[!is.na(x)])#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
})
bits = sapply(wx,function(Y){#
		x = celex[match(strsplit(Y," ")[[1]],celex$Word),]$PhonCLX#
		return(paste(x,sep=''))#
		}#
		)
bits
bits = sapply(wx,function(Y){#
		x = celex[match(strsplit(Y," ")[[1]],celex$Word),]$PhonCLX#
		return(paste(x[!is.na(x)],collapse=''))#
		}#
		)
bits
sapply(AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)], function(X){#
	wx = strsplit(X,",")[[1]]#
	bits = sapply(wx,function(Y){#
		x = celex[match(strsplit(Y," ")[[1]],celex$Word),]$PhonCLX#
		return(paste(x[!is.na(x)],collapse=''))#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
})
length(EnglishWords)
length(sapply(AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)], function(X){#
	wx = strsplit(X,",")[[1]]#
	bits = sapply(wx,function(Y){#
		x = celex[match(strsplit(Y," ")[[1]],celex$Word),]$PhonCLX#
		return(paste(x[!is.na(x)],collapse=''))#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
}))
rm(list=ls())#
#
try(setwd("U:/Pragmatics/Slonimska/Data/RAW_data/WOLD"))#
#
try(setwd("~/Documents/MPI/SemanticsPragmatics/2015Course/Projects/Slonimska/NewAnalysis/Pragmatics_Slonimska/RAW_data/WOLD"))#
AllWOLDdata<-read.csv("word_processed.csv",stringsAsFactors=F,encoding='utf-8')#
#
celex = read.delim("~/Documents/MPI/CausalGraphs/CELEX_EngWordforms.txt",sep='\\',quote='',stringsAsFactors=F)#
#
celex$PhonCLX = gsub("\\.",'',celex$PhonCLX)#
#
celex = celex[!duplicated(celex$Word),]#
#
celex.conv = read.delim("../../Processing/CharacterSubstitutions/CELEX_converstion.tab")#
for(i in 1:nrow(celex.conv)){#
	celex$PhonCLX = gsub(celex.conv[i,1],celex.conv[i,2],celex$PhonCLX)#
}#
celex$PhonCLX = gsub("\\{","a",celex$PhonCLX)#
celex$PhonCLX = gsub("\\'","",celex$PhonCLX)#
celex$PhonCLX = gsub("\\$","o",celex$PhonCLX)#
celex$Word = tolower(celex$Word)#
#
EnglishWords = AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language),]$word#
EnglishWords = tolower(EnglishWords)#
EnglishWords = gsub("^be ","",EnglishWords)#
EnglishWords = gsub("^to ","",EnglishWords)#
EnglishWords = gsub("^to ","",EnglishWords)#
EnglishWords = gsub("\\?","",EnglishWords)#
EnglishWords = gsub(" \\(1\\)","",EnglishWords)#
EnglishWords = gsub(" \\(2\\)","",EnglishWords)#
EnglishWords = gsub(" \\(3\\)","",EnglishWords)#
EnglishWords = gsub("\\)"," ",EnglishWords)#
EnglishWords = gsub("\\("," ",EnglishWords)#
EnglishWords = gsub(" +"," ",EnglishWords)#
EnglishWords = gsub("\\"""," ",EnglishWords)#
EnglishWords = gsub(" $","",EnglishWords)#
#
AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language),]$word = EnglishWords#
EnglishWords = celex$PhonCLX[match(EnglishWords,celex$Word)]#
#
AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language) & is.na(EnglishWords),]$word = sapply(AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language) & is.na(EnglishWords),]$word , function(X){#
	wx = strsplit(X,",")[[1]]#
	bits = sapply(wx,function(Y){#
		x = celex[match(strsplit(Y," ")[[1]],celex$Word),]$PhonCLX#
		return(paste(x[!is.na(x)],collapse=''))#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
})
rm(list=ls())#
#
try(setwd("U:/Pragmatics/Slonimska/Data/RAW_data/WOLD"))#
#
try(setwd("~/Documents/MPI/SemanticsPragmatics/2015Course/Projects/Slonimska/NewAnalysis/Pragmatics_Slonimska/RAW_data/WOLD"))#
AllWOLDdata<-read.csv("word_processed.csv",stringsAsFactors=F,encoding='utf-8')#
#
celex = read.delim("~/Documents/MPI/CausalGraphs/CELEX_EngWordforms.txt",sep='\\',quote='',stringsAsFactors=F)#
#
celex$PhonCLX = gsub("\\.",'',celex$PhonCLX)#
#
celex = celex[!duplicated(celex$Word),]#
#
celex.conv = read.delim("../../Processing/CharacterSubstitutions/CELEX_converstion.tab")#
for(i in 1:nrow(celex.conv)){#
	celex$PhonCLX = gsub(celex.conv[i,1],celex.conv[i,2],celex$PhonCLX)#
}#
celex$PhonCLX = gsub("\\{","a",celex$PhonCLX)#
celex$PhonCLX = gsub("\\'","",celex$PhonCLX)#
celex$PhonCLX = gsub("\\$","o",celex$PhonCLX)#
celex$Word = tolower(celex$Word)#
#
EnglishWords = AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language),]$word#
EnglishWords = tolower(EnglishWords)#
EnglishWords = gsub("^be ","",EnglishWords)#
EnglishWords = gsub("^to ","",EnglishWords)#
EnglishWords = gsub("^to ","",EnglishWords)#
EnglishWords = gsub("\\?","",EnglishWords)#
EnglishWords = gsub(" \\(1\\)","",EnglishWords)#
EnglishWords = gsub(" \\(2\\)","",EnglishWords)#
EnglishWords = gsub(" \\(3\\)","",EnglishWords)#
EnglishWords = gsub("\\)"," ",EnglishWords)#
EnglishWords = gsub("\\("," ",EnglishWords)#
EnglishWords = gsub(" +"," ",EnglishWords)#
EnglishWords = gsub("\\"""," ",EnglishWords)#
EnglishWords = gsub(" $","",EnglishWords)#
#
AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language),]$word = EnglishWords#
EnglishWords = celex$PhonCLX[match(EnglishWords,celex$Word)]#
#
AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)] = sapply(AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)], function(X){#
	wx = strsplit(X,",")[[1]]#
	bits = sapply(wx,function(Y){#
		x = celex[match(strsplit(Y," ")[[1]],celex$Word),]$PhonCLX#
		return(paste(x[!is.na(x)],collapse=''))#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
})
head(AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language),])
AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language),]$word[!is.na(EnglishWords)]  = EnglishWords[!is.na(EnglishWords)]
head(AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language),])
x = AllWOLDdata[AllWOLDdata$target_language=="English" & !is.na(AllWOLDdata$target_language),]
x[grepl("_",x$Word),]
x[grepl("_",x$word),]
x[grepl("_",x$word),c('word','meaning')]
x[grepl("3",x$word),c('word','meaning')]
dcelex = read.delim("Dutch_Celex.txt",sep='\\',quote='',stringsAsFactors=F)#
dcelex = covertCelex(dcelex)
covertCelex = function(celex){#
	celex$PhonCLX = gsub("\\.",'',celex$PhonCLX)#
#
	celex = celex[!duplicated(celex$Word),]#
	celex.conv = read.delim("../../Processing/CharacterSubstitutions/CELEX_converstion.tab")#
	for(i in 1:nrow(celex.conv)){#
		celex$PhonCLX = gsub(celex.conv[i,1],celex.conv[i,2],celex$PhonCLX)#
	}#
	celex$PhonCLX = gsub("\\{","a",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\'","",celex$PhonCLX)#
	celex$PhonCLX = gsub('\\"',"",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\$","o",celex$PhonCLX)#
	celex$Word = tolower(celex$Word)#
	return(celex)#
}
dcelex = covertCelex(dcelex)
head(delex)
head(dcelex)
dcelex = dcelex[nchar(dcelex>0),]
head(dcelex)
dcelex = read.delim("Dutch_Celex.txt",sep='\\',quote='',stringsAsFactors=F)#
dcelex = covertCelex(dcelex)#
dcelex = dcelex[nchar(dcelex$PhonCLX>0),]
rm(list=ls())#
#
try(setwd("U:/Pragmatics/Slonimska/Data/RAW_data/WOLD"))#
#
try(setwd("~/Documents/MPI/SemanticsPragmatics/2015Course/Projects/Slonimska/NewAnalysis/Pragmatics_Slonimska/RAW_data/WOLD"))#
covertCelex = function(celex){#
	celex$PhonCLX = gsub("\\.",'',celex$PhonCLX)#
#
	celex = celex[!duplicated(celex$Word),]#
	celex.conv = read.delim("../../Processing/CharacterSubstitutions/CELEX_converstion.tab")#
	for(i in 1:nrow(celex.conv)){#
		celex$PhonCLX = gsub(celex.conv[i,1],celex.conv[i,2],celex$PhonCLX)#
	}#
	celex$PhonCLX = gsub("\\{","a",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\'","",celex$PhonCLX)#
	celex$PhonCLX = gsub('\\"',"",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\$","o",celex$PhonCLX)#
	celex$Word = tolower(celex$Word)#
	return(celex)#
}#
AllWOLDdata<-read.csv("word_processed.csv",stringsAsFactors=F,encoding='utf-8')#
#
AllWOLDdata$originalWord = AllWOLDdata$word#
### ENGLISH#
#
celex = read.delim("~/Documents/MPI/CausalGraphs/CELEX_EngWordforms.txt",sep='\\',quote='',stringsAsFactors=F)#
celex = covertCelex(celex)#
#
transcribeLanguage = function(Lang,celex){#
EnglishWords = AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word#
EnglishWords = tolower(EnglishWords)#
EnglishWords = gsub("^be ","",EnglishWords)#
EnglishWords = gsub("^to ","",EnglishWords)#
EnglishWords = gsub("^to ","",EnglishWords)#
EnglishWords = gsub("\\?","",EnglishWords)#
EnglishWords = gsub(" \\(1\\)","",EnglishWords)#
EnglishWords = gsub(" \\(2\\)","",EnglishWords)#
EnglishWords = gsub(" \\(3\\)","",EnglishWords)#
EnglishWords = gsub("\\)"," ",EnglishWords)#
EnglishWords = gsub("\\("," ",EnglishWords)#
EnglishWords = gsub(" +"," ",EnglishWords)#
EnglishWords = gsub("\\"""," ",EnglishWords)#
EnglishWords = gsub(" $","",EnglishWords)#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word = EnglishWords#
EnglishWords = celex$PhonCLX[match(EnglishWords,celex$Word)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[!is.na(EnglishWords)]  = EnglishWords[!is.na(EnglishWords)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)] = sapply(AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)], function(X){#
	wx = strsplit(X,",")[[1]]#
	bits = sapply(wx,function(Y){#
		x = celex[match(strsplit(Y," ")[[1]],celex$Word),]$PhonCLX#
		return(paste(x[!is.na(x)],collapse=''))#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
})#
}#
#
transcribeLanguage("English",celex)#
#### Dutch#
#
dcelex = read.delim("Dutch_Celex.txt",sep='\\',quote='',stringsAsFactors=F)#
dcelex = covertCelex(dcelex)#
dcelex = dcelex[nchar(dcelex$PhonCLX>0),]#
#
transcribeLanguage("Dutch",dcelex)
rm(list=ls())#
#
try(setwd("U:/Pragmatics/Slonimska/Data/RAW_data/WOLD"))#
#
try(setwd("~/Documents/MPI/SemanticsPragmatics/2015Course/Projects/Slonimska/NewAnalysis/Pragmatics_Slonimska/RAW_data/WOLD"))#
covertCelex = function(celex){#
	celex$PhonCLX = gsub("\\.",'',celex$PhonCLX)#
#
	celex = celex[!duplicated(celex$Word),]#
	celex.conv = read.delim("../../Processing/CharacterSubstitutions/CELEX_converstion.tab")#
	for(i in 1:nrow(celex.conv)){#
		celex$PhonCLX = gsub(celex.conv[i,1],celex.conv[i,2],celex$PhonCLX)#
	}#
	celex$PhonCLX = gsub("\\{","a",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\'","",celex$PhonCLX)#
	celex$PhonCLX = gsub('\\"',"",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\$","o",celex$PhonCLX)#
	celex$Word = tolower(celex$Word)#
	return(celex)#
}#
AllWOLDdata<-read.csv("word_processed.csv",stringsAsFactors=F,encoding='utf-8')#
#
AllWOLDdata$originalWord = AllWOLDdata$word#
### ENGLISH#
#
celex = read.delim("~/Documents/MPI/CausalGraphs/CELEX_EngWordforms.txt",sep='\\',quote='',stringsAsFactors=F)#
celex = covertCelex(celex)#
#
transcribeLanguage = function(Lang,celex){#
EnglishWords = AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word#
EnglishWords = tolower(EnglishWords)#
EnglishWords = gsub("^be ","",EnglishWords)#
EnglishWords = gsub("^to ","",EnglishWords)#
EnglishWords = gsub("^to ","",EnglishWords)#
EnglishWords = gsub("\\?","",EnglishWords)#
EnglishWords = gsub(" \\(1\\)","",EnglishWords)#
EnglishWords = gsub(" \\(2\\)","",EnglishWords)#
EnglishWords = gsub(" \\(3\\)","",EnglishWords)#
EnglishWords = gsub("\\)"," ",EnglishWords)#
EnglishWords = gsub("\\("," ",EnglishWords)#
EnglishWords = gsub(" +"," ",EnglishWords)#
EnglishWords = gsub('\\"',"",EnglishWords)#
EnglishWords = gsub("\\'","",EnglishWords)#
EnglishWords = gsub(" $","",EnglishWords)#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word = EnglishWords#
EnglishWords = celex$PhonCLX[match(EnglishWords,celex$Word)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[!is.na(EnglishWords)]  = EnglishWords[!is.na(EnglishWords)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)] = sapply(AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)], function(X){#
	wx = strsplit(X,",")[[1]]#
	bits = sapply(wx,function(Y){#
		x = celex[match(strsplit(Y," ")[[1]],celex$Word),]$PhonCLX#
		return(paste(x[!is.na(x)],collapse=''))#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
})#
}#
#
transcribeLanguage("English",celex)#
#### Dutch#
#
dcelex = read.delim("Dutch_Celex.txt",sep='\\',quote='',stringsAsFactors=F)#
dcelex = covertCelex(dcelex)#
dcelex = dcelex[nchar(dcelex$PhonCLX>0),]#
#
transcribeLanguage("Dutch",dcelex)
AllWOLDdata[AllWOLDdata$target_language=="Dutch" & !is.na(AllWOLDdata$target_language),]$word
Lang="Dutch"
celex = dcelex
head(dcelex)
EnglishWords = AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word
EnglishWords
EnglishWords = tolower(EnglishWords)
EnglishWords = gsub("^be ","",EnglishWords)#
EnglishWords = gsub("^to ","",EnglishWords)#
EnglishWords = gsub("^to ","",EnglishWords)#
EnglishWords = gsub("\\?","",EnglishWords)#
EnglishWords = gsub(" \\(1\\)","",EnglishWords)#
EnglishWords = gsub(" \\(2\\)","",EnglishWords)#
EnglishWords = gsub(" \\(3\\)","",EnglishWords)#
EnglishWords = gsub("\\)"," ",EnglishWords)#
EnglishWords = gsub("\\("," ",EnglishWords)#
EnglishWords = gsub(" +"," ",EnglishWords)#
EnglishWords = gsub('\\"',"",EnglishWords)#
EnglishWords = gsub("\\'","",EnglishWords)#
EnglishWords = gsub(" $","",EnglishWords)
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word = EnglishWords
EnglishWords = celex$PhonCLX[match(EnglishWords,celex$Word)]
EnglishWords
head(celex$Word)
head(EnglishWords)
transcribeLanguage = function(Lang,celex){#
EnglishWords = AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word#
EnglishWords = tolower(EnglishWords)
EnglishWords = AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word#
EnglishWords = tolower(EnglishWords)
EnglishWords
EnglishWords = gsub("^be ","",EnglishWords)#
EnglishWords = gsub("^to ","",EnglishWords)#
EnglishWords = gsub("^to ","",EnglishWords)#
EnglishWords = gsub("\\?","",EnglishWords)#
EnglishWords = gsub(" \\(1\\)","",EnglishWords)#
EnglishWords = gsub(" \\(2\\)","",EnglishWords)#
EnglishWords = gsub(" \\(3\\)","",EnglishWords)#
EnglishWords = gsub("\\)"," ",EnglishWords)#
EnglishWords = gsub("\\("," ",EnglishWords)#
EnglishWords = gsub(" +"," ",EnglishWords)
head(EnglishWords)
EnglishWords = gsub('\\"',"",EnglishWords)
head(EnglishWords)
EnglishWords = gsub("\\'","",EnglishWords)
head(EnglishWords)
EnglishWords = gsub(" $","",EnglishWords)
head(EnglishWords)
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word = EnglishWords
celex$PhonCLX[match(EnglishWords,celex$Word)]
EnglishWords
EnglishWords
celex$Word
head(dcelex)
dcelex = covertCelex(dcelex)
head(dcelex)
dcelex = read.delim("Dutch_Celex.txt",sep='\\',quote='',stringsAsFactors=F)
dcelex = covertCelex(dcelex)
head(dcelex)
head(dcelex,30)
dcelex[grepl("K",dcelex$PhonCLX),]$Word
dcelex[grepl("K",dcelex$PhonCLX),c("Word","PhonCLX"),][1:30,]
transcribeLanguage("Dutch",dcelex)
Lang
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),][1:30]
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),][1:30,]
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),][1:30,c("word",'meaning')]
Lang = "Dutch"#
DutchWords = AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word#
DutchWords = tolower(DutchWords)#
DutchWords = gsub("\\?","",DutchWords)#
DutchWords = gsub(" \\(1\\)","",DutchWords)#
DutchWords = gsub(" \\(2\\)","",DutchWords)#
DutchWords = gsub(" \\(3\\)","",DutchWords)#
DutchWords = gsub("\\)"," ",DutchWords)#
DutchWords = gsub("\\("," ",DutchWords)#
DutchWords = gsub(" +"," ",DutchWords)#
DutchWords = gsub('\\"',"",DutchWords)#
DutchWords = gsub("\\'","",DutchWords)#
DutchWords = gsub(" $","",DutchWords)#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word = DutchWords#
DutchWords = celex$PhonCLX[match(DutchWords,celex$Word)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[!is.na(DutchWords)]  = DutchWords[!is.na(DutchWords)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(DutchWords)] = sapply(AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(DutchWords)], function(X){#
	wx = strsplit(X,",")[[1]]#
	bits = sapply(wx,function(Y){#
		x = celex[match(strsplit(Y," ")[[1]],celex$Word),]$PhonCLX#
		return(paste(x[!is.na(x)],collapse=''))#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
})
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),][1:30,]
AllWOLDdata<-read.csv("word_processed.csv",stringsAsFactors=F,encoding='utf-8')
AllWOLDdata$originalWord = AllWOLDdata$word
dcelex = read.delim("Dutch_Celex.txt",sep='\\',quote='',stringsAsFactors=F)#
dcelex = covertCelex(dcelex)#
dcelex = dcelex[nchar(dcelex$PhonCLX>0),]#
#
transcribeLanguage("Dutch",dcelex)#
Lang = "Dutch"#
DutchWords = AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word#
DutchWords = tolower(DutchWords)#
DutchWords = gsub("\\?","",DutchWords)#
DutchWords = gsub(" \\(1\\)","",DutchWords)#
DutchWords = gsub(" \\(2\\)","",DutchWords)#
DutchWords = gsub(" \\(3\\)","",DutchWords)#
DutchWords = gsub("\\)"," ",DutchWords)#
DutchWords = gsub("\\("," ",DutchWords)#
DutchWords = gsub(" +"," ",DutchWords)#
DutchWords = gsub('\\"',"",DutchWords)#
DutchWords = gsub("\\'","",DutchWords)#
DutchWords = gsub(" $","",DutchWords)#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word = DutchWords#
DutchWords = celex$PhonCLX[match(DutchWords,celex$Word)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[!is.na(DutchWords)]  = DutchWords[!is.na(DutchWords)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(DutchWords)] = sapply(AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(DutchWords)], function(X){#
	wx = strsplit(X,",")[[1]]#
	bits = sapply(wx,function(Y){#
		x = celex[match(strsplit(Y," ")[[1]],celex$Word),]$PhonCLX#
		return(paste(x[!is.na(x)],collapse=''))#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
})
AllWOLDdata<-read.csv("word_processed.csv",stringsAsFactors=F,encoding='utf-8')
AllWOLDdata$originalWord = AllWOLDdata$word
dcelex = read.delim("Dutch_Celex.txt",sep='\\',quote='',stringsAsFactors=F)#
dcelex = covertCelex(dcelex)#
dcelex = dcelex[nchar(dcelex$PhonCLX>0),]#
Lang = "Dutch"#
DutchWords = AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word#
DutchWords = tolower(DutchWords)#
DutchWords = gsub("\\?","",DutchWords)#
DutchWords = gsub(" \\(1\\)","",DutchWords)#
DutchWords = gsub(" \\(2\\)","",DutchWords)#
DutchWords = gsub(" \\(3\\)","",DutchWords)#
DutchWords = gsub("\\)"," ",DutchWords)#
DutchWords = gsub("\\("," ",DutchWords)#
DutchWords = gsub(" +"," ",DutchWords)#
DutchWords = gsub('\\"',"",DutchWords)#
DutchWords = gsub("\\'","",DutchWords)#
DutchWords = gsub(" $","",DutchWords)#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word = DutchWords#
DutchWords = dcelex$PhonCLX[match(DutchWords,dcelex$Word)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[!is.na(DutchWords)]  = DutchWords[!is.na(DutchWords)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(DutchWords)] = sapply(AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(DutchWords)], function(X){#
	wx = strsplit(X,",")[[1]]#
	bits = sapply(wx,function(Y){#
		x = dcelex[match(strsplit(Y," ")[[1]],dcelex$Word),]$PhonCLX#
		return(paste(x[!is.na(x)],collapse=''))#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
})
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),][1:30,]
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word
AllWOLDdata<-read.csv("word_processed.csv",stringsAsFactors=F,encoding='utf-8')
AllWOLDdata$originalWord = AllWOLDdata$word
Lang = "Dutch"
DutchWords = AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word
head(DutchWords)
DutchWords = tolower(DutchWords)
DutchWords = gsub("\\?","",DutchWords)#
DutchWords = gsub(" \\(1\\)","",DutchWords)#
DutchWords = gsub(" \\(2\\)","",DutchWords)#
DutchWords = gsub(" \\(3\\)","",DutchWords)#
DutchWords = gsub("\\)"," ",DutchWords)#
DutchWords = gsub("\\("," ",DutchWords)#
DutchWords = gsub(" +"," ",DutchWords)#
DutchWords = gsub('\\"',"",DutchWords)#
DutchWords = gsub("\\'","",DutchWords)#
DutchWords = gsub(" $","",DutchWords)
head(DutchWords)
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word = DutchWords
head(AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word)
dcelex$PhonCLX[match(DutchWords,dcelex$Word)]
dcelex$PhonCLX
head(dcelex$PhonCLX)
head(dcelex)
dcelex = read.delim("Dutch_Celex.txt",sep='\\',quote='',stringsAsFactors=F)#
dcelex = covertCelex(dcelex)#
dcelex = dcelex[nchar(dcelex$PhonCLX)>0,]
head(dcelex)
Lang = "Dutch"#
DutchWords = AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word#
DutchWords = tolower(DutchWords)#
DutchWords = gsub("\\?","",DutchWords)#
DutchWords = gsub(" \\(1\\)","",DutchWords)#
DutchWords = gsub(" \\(2\\)","",DutchWords)#
DutchWords = gsub(" \\(3\\)","",DutchWords)#
DutchWords = gsub("\\)"," ",DutchWords)#
DutchWords = gsub("\\("," ",DutchWords)#
DutchWords = gsub(" +"," ",DutchWords)#
DutchWords = gsub('\\"',"",DutchWords)#
DutchWords = gsub("\\'","",DutchWords)#
DutchWords = gsub(" $","",DutchWords)#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word = DutchWords#
DutchWords = dcelex$PhonCLX[match(DutchWords,dcelex$Word)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[!is.na(DutchWords)]  = DutchWords[!is.na(DutchWords)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(DutchWords)] = sapply(AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(DutchWords)], function(X){#
	wx = strsplit(X,",")[[1]]#
	bits = sapply(wx,function(Y){#
		x = dcelex[match(strsplit(Y," ")[[1]],dcelex$Word),]$PhonCLX#
		return(paste(x[!is.na(x)],collapse=''))#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
})
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),][1:30,]
write.csv(AllWOLDdata,file="word_processed_transcribed.csv",encoding='utf-8',fileEncoding='utf-8')
write.csv(AllWOLDdata,file="word_processed_transcribed.csv",fileEncoding='utf-8')
head(AllWOLDdata[AllWOLDdata$target_language=="German",]$word)
gcelex = read.delim("German_Celex.txt",sep='\\',quote='',stringsAsFactors=F)#
gcelex = covertCelex(gcelex)#
gcelex = gcelex[nchar(gcelex$PhonCLX)>0,]
Lang = "German"#
GermanWords = AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word#
GermanWords = tolower(GermanWords)#
GermanWords = gsub("\\?","",GermanWords)#
GermanWords = gsub(" \\(1\\)","",GermanWords)#
GermanWords = gsub(" \\(2\\)","",GermanWords)#
GermanWords = gsub(" \\(3\\)","",GermanWords)#
GermanWords = gsub("\\)"," ",GermanWords)#
GermanWords = gsub("\\("," ",GermanWords)#
GermanWords = gsub(" +"," ",GermanWords)#
GermanWords = gsub('\\"',"",GermanWords)#
GermanWords = gsub("\\'","",GermanWords)#
GermanWords = gsub(" $","",GermanWords)#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word = GermanWords
GermanWords = gcelex$PhonCLX[match(GermanWords,gcelex$Word)]
head(GermanWords)
head(GermanWords,100)
head(AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word,100)
gcelex[gcelex$Word=='nach',]
gcelex[gcelex$Word=='schuster',]
gcelex[gcelex$Word=='ich',]
gcelex = read.delim("German_Celex.txt",sep='\\',quote='',stringsAsFactors=F)
gcelex[gcelex$Word=='ich',]
gcelex[gcelex$Word=='leiter',]
head(gcelex[grepl("W",gcelex$Word])
head(gcelex[grepl("W",gcelex$Word),])
head(gcelex[grepl("W",gcelex$PhonCLX),])
gcelex = read.delim("German_Celex.txt",sep='\\',quote='',stringsAsFactors=F)#
gcelex = covertCelex(gcelex)#
gcelex = gcelex[nchar(gcelex$PhonCLX)>0,]
sample(gcelex$PhonCLX,40)
head(gcelex[grepl("=",gcelex$PhonCLX),])
sample(gcelex[grepl("=",gcelex$PhonCLX),],30)
sample(gcelex[grepl("=",gcelex$PhonCLX),],10)
sample(gcelex[grepl("=",gcelex$PhonCLX),]$phonCLX,10)
sample(gcelex[grepl("=",gcelex$PhonCLX),]$PhonCLX,10)
head(gcelex[grepl("=",gcelex$PhonCLX),],30)
sample(gcelex$PhonCLX,40)
head(gcelex[grepl("X",gcelex$PhonCLX),],30)
sample(gcelex$PhonCLX,40)
sample(gcelex$PhonCLX,40)
head(gcelex[grepl("+",gcelex$PhonCLX),],30)
head(gcelex[grepl("\\+",gcelex$PhonCLX),],30)
sample(gcelex$PhonCLX,40)
sample(gcelex$PhonCLX,40)
head(gcelex[grepl("\\|",gcelex$PhonCLX),],30)
head(gcelex[grepl("\\|",gcelex$PhonCLX),],30)
sample(gcelex$PhonCLX,40)
sample(gcelex$PhonCLX,40)
sample(gcelex$PhonCLX,40)
head(gcelex[grepl("\\)",gcelex$PhonCLX),],30)
sample(gcelex$PhonCLX,40)
sample(gcelex$PhonCLX,40)
sample(gcelex$PhonCLX,40)
sample(gcelex$PhonCLX,40)
head(gcelex[grepl("Y",gcelex$PhonCLX),],30)
sample(gcelex$PhonCLX,40)
sample(gcelex$PhonCLX,40)
sample(gcelex$PhonCLX,40)
sample(gcelex$PhonCLX,40)
sample(gcelex$PhonCLX,40)
sample(gcelex$PhonCLX,40)
sample(gcelex$PhonCLX,40)
sample(gcelex$PhonCLX,40)
sample(dcelex$PhonCLX,40)
head(dcelex[grepl("M",dcelex$PhonCLX),],30)
sample(dcelex$PhonCLX,40)
head(dcelex[grepl("\\}",dcelex$PhonCLX),],30)
sample(dcelex$PhonCLX,40)
sample(dcelex$PhonCLX,40)
sample(dcelex$PhonCLX,40)
sample(dcelex$PhonCLX,40)
sample(dcelex$PhonCLX,40)
sample(celex$PhonCLX,40)
sample(celex$PhonCLX,40)
sample(celex$PhonCLX,40)
sample(celex$PhonCLX,40)
sample(celex$PhonCLX,40)
sample(celex$PhonCLX,40)
sample(celex$PhonCLX,40)
sample(celex$PhonCLX,40)
sample(celex$PhonCLX,40)
covertCelex = function(celex){#
	celex$PhonCLX = gsub("\\.",'',celex$PhonCLX)#
#
	celex = celex[!duplicated(celex$Word),]#
	celex.conv = read.delim("../../Processing/CharacterSubstitutions/CELEX_converstion.tab")#
	for(i in 1:nrow(celex.conv)){#
		celex$PhonCLX = gsub(celex.conv[i,1],celex.conv[i,2],celex$PhonCLX)#
	}#
	celex$PhonCLX = gsub("\\{","a",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\'","",celex$PhonCLX)#
	celex$PhonCLX = gsub('\\"',"",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\$","o",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\+","pf", celex$PhonCLX)#
	celex$PhonCLX = gsub("\\|","o", celex$PhonCLX)#
	celex$PhonCLX = gsub("\\)","a", celex$PhonCLX)#
	celex$PhonCLX = gsub("\\}","ǝ",celex$PhonCLX)	#
	celex$Word = tolower(celex$Word)#
	return(celex)#
}
celex = read.delim("~/Documents/MPI/CausalGraphs/CELEX_EngWordforms.txt",sep='\\',quote='',stringsAsFactors=F)#
celex = covertCelex(celex)
sample(celex$PhonCLX,40)
sample(celex$PhonCLX,40)
head(celex[grepl("H",celex$PhonCLX),],30)
head(celex[grepl("H",celex$PhonCLX),],30)
sample(celex$PhonCLX,40)
sample(celex$PhonCLX,40)
sample(celex$PhonCLX,40)
sample(celex$PhonCLX,40)
sample(celex$PhonCLX,40)
sample(celex$PhonCLX,40)
sample(celex$PhonCLX,40)
sample(celex$PhonCLX,40)
sample(celex$PhonCLX,40)
sample(celex$PhonCLX,40)
sample(celex$PhonCLX,40)
rm(list=ls())#
#
try(setwd("U:/Pragmatics/Slonimska/Data/RAW_data/WOLD"))#
#
try(setwd("~/Documents/MPI/SemanticsPragmatics/2015Course/Projects/Slonimska/NewAnalysis/Pragmatics_Slonimska/RAW_data/WOLD"))#
covertCelex = function(celex){#
	celex$PhonCLX = gsub("\\.",'',celex$PhonCLX)#
#
	celex = celex[!duplicated(celex$Word),]#
	celex.conv = read.delim("../../Processing/CharacterSubstitutions/CELEX_converstion.tab")#
	for(i in 1:nrow(celex.conv)){#
		celex$PhonCLX = gsub(celex.conv[i,1],celex.conv[i,2],celex$PhonCLX)#
	}#
	celex$PhonCLX = gsub("\\{","a",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\'","",celex$PhonCLX)#
	celex$PhonCLX = gsub('\\"',"",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\$","o",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\+","pf", celex$PhonCLX)#
	celex$PhonCLX = gsub("\\|","o", celex$PhonCLX)#
	celex$PhonCLX = gsub("\\)","a", celex$PhonCLX)#
	celex$PhonCLX = gsub("\\}","ǝ",celex$PhonCLX)	#
	celex$Word = tolower(celex$Word)#
	return(celex)#
}#
AllWOLDdata<-read.csv("word_processed.csv",stringsAsFactors=F,encoding='utf-8')#
#
AllWOLDdata$originalWord = AllWOLDdata$word#
### ENGLISH#
#
celex = read.delim("~/Documents/MPI/CausalGraphs/CELEX_EngWordforms.txt",sep='\\',quote='',stringsAsFactors=F)#
celex = covertCelex(celex)#
#
Lang = "English"#
EnglishWords = AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word#
EnglishWords = tolower(EnglishWords)#
EnglishWords = gsub("^be ","",EnglishWords)#
EnglishWords = gsub("^to ","",EnglishWords)#
EnglishWords = gsub("^to ","",EnglishWords)#
EnglishWords = gsub("\\?","",EnglishWords)#
EnglishWords = gsub(" \\(1\\)","",EnglishWords)#
EnglishWords = gsub(" \\(2\\)","",EnglishWords)#
EnglishWords = gsub(" \\(3\\)","",EnglishWords)#
EnglishWords = gsub("\\)"," ",EnglishWords)#
EnglishWords = gsub("\\("," ",EnglishWords)#
EnglishWords = gsub(" +"," ",EnglishWords)#
EnglishWords = gsub('\\"',"",EnglishWords)#
EnglishWords = gsub("\\'","",EnglishWords)#
EnglishWords = gsub(" $","",EnglishWords)#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word = EnglishWords#
EnglishWords = celex$PhonCLX[match(EnglishWords,celex$Word)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[!is.na(EnglishWords)]  = EnglishWords[!is.na(EnglishWords)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)] = sapply(AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)], function(X){#
	wx = strsplit(X,",")[[1]]#
	bits = sapply(wx,function(Y){#
		x = celex[match(strsplit(Y," ")[[1]],celex$Word),]$PhonCLX#
		return(paste(x[!is.na(x)],collapse=''))#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
})#
#### Dutch#
#
dcelex = read.delim("Dutch_Celex.txt",sep='\\',quote='',stringsAsFactors=F)#
dcelex = covertCelex(dcelex)#
dcelex = dcelex[nchar(dcelex$PhonCLX)>0,]#
Lang = "Dutch"#
DutchWords = AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word#
DutchWords = tolower(DutchWords)#
DutchWords = gsub("\\?","",DutchWords)#
DutchWords = gsub(" \\(1\\)","",DutchWords)#
DutchWords = gsub(" \\(2\\)","",DutchWords)#
DutchWords = gsub(" \\(3\\)","",DutchWords)#
DutchWords = gsub("\\)"," ",DutchWords)#
DutchWords = gsub("\\("," ",DutchWords)#
DutchWords = gsub(" +"," ",DutchWords)#
DutchWords = gsub('\\"',"",DutchWords)#
DutchWords = gsub("\\'","",DutchWords)#
DutchWords = gsub(" $","",DutchWords)#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word = DutchWords#
DutchWords = dcelex$PhonCLX[match(DutchWords,dcelex$Word)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[!is.na(DutchWords)]  = DutchWords[!is.na(DutchWords)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(DutchWords)] = sapply(AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(DutchWords)], function(X){#
	wx = strsplit(X,",")[[1]]#
	bits = sapply(wx,function(Y){#
		x = dcelex[match(strsplit(Y," ")[[1]],dcelex$Word),]$PhonCLX#
		return(paste(x[!is.na(x)],collapse=''))#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
})#
#####
# German#
gcelex = read.delim("German_Celex.txt",sep='\\',quote='',stringsAsFactors=F)#
gcelex = covertCelex(gcelex)#
gcelex = gcelex[nchar(gcelex$PhonCLX)>0,]#
Lang = "German"#
GermanWords = AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word#
GermanWords = tolower(GermanWords)#
GermanWords = gsub("\\?","",GermanWords)#
GermanWords = gsub(" \\(1\\)","",GermanWords)#
GermanWords = gsub(" \\(2\\)","",GermanWords)#
GermanWords = gsub(" \\(3\\)","",GermanWords)#
GermanWords = gsub("\\)"," ",GermanWords)#
GermanWords = gsub("\\("," ",GermanWords)#
GermanWords = gsub(" +"," ",GermanWords)#
GermanWords = gsub('\\"',"",GermanWords)#
GermanWords = gsub("\\'","",GermanWords)#
GermanWords = gsub(" $","",GermanWords)#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word = GermanWords#
GermanWords = gcelex$PhonCLX[match(GermanWords,gcelex$Word)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[!is.na(GermanWords)]  = GermanWords[!is.na(GermanWords)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(GermanWords)] = sapply(AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(GermanWords)], function(X){#
	wx = strsplit(X,",")[[1]]#
	bits = sapply(wx,function(Y){#
		x = gcelex[match(strsplit(Y," ")[[1]],gcelex$Word),]$PhonCLX#
		return(paste(x[!is.na(x)],collapse=''))#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
})#
write.csv(AllWOLDdata,file="word_processed_transcribed.csv",fileEncoding='utf-8')
rm(list=ls())#
try(setwd("U:/Pragmatics/Slonimska/Data/RAW_data/WOLD"))#
#
try(setwd("~/Documents/MPI/SemanticsPragmatics/2015Course/Projects/Slonimska/NewAnalysis/Pragmatics_Slonimska/RAW_data/WOLD"))#
#Get rid of unnecessary columns#
AllWOLDdata<-read.csv("word_processed_transcribed.csv",stringsAsFactors=F,encoding='utf-8')#
AllWOLDdata$age_score<-NULL#
AllWOLDdata$simplicity_score<-NULL#
AllWOLDdata$borrowed<-NULL#
#AllWOLDdata$analyzability<-NULL#
AllWOLDdata$valueset_pk<-NULL#
AllWOLDdata$counterpart<-NULL#
AllWOLDdata$POS<-NULL#
AllWOLDdata$semantic_field_pk<-NULL#
AllWOLDdata$semantic_field<-NULL#
AllWOLDdata$pk<-NULL#
AllWOLDdata$parameter_pk<-NULL#
AllWOLDdata = AllWOLDdata[!is.na(AllWOLDdata$language_pk),]#
#
AllWOLDdata = AllWOLDdata[AllWOLDdata$word!='Unidentifiable',]#
#Add new column Source that shows the source of the language -WOLD#
AllWOLDdata$Source<-"WOLD"#
#Name column target_language into Language#
AllWOLDdata$Language = AllWOLDdata$target_language#
#Add iso codes to the file. Import file Wold_to_iso.tab#
iso.codes.wold<-read.delim("Wold_to_iso.tab",stringsAsFactors=F,encoding='utf-8')#
#Specify in which column new info goes (AllWOLDdata$iso); equate it to the column from which it takes info (iso.codes.wold$iso);match AllWOLDdata$language_pk to iso.codes.wold$wold.number#
AllWOLDdata$iso=iso.codes.wold$iso[match(AllWOLDdata$language_pk,iso.codes.wold$wold.number)]#
#
AllWOLDdata$language_pk=AllWOLDdata$meaning.id#
#Import Data_clean_up.csv file to get glotto codes.#
#codes.file<-read.delim("../Data_clean_up.csv",sep='\t',stringsAsFactors=F)#
codes.file <- read.csv("../Data_clean_up.csv",stringsAsFactors=F)#
AllWOLDdata$iso[is.na(AllWOLDdata$iso)]=codes.file$iso[match(AllWOLDdata$Language[is.na(AllWOLDdata$iso)],codes.file$N1)]#
#Add glotto codes to the Wold languages in new column by using codes.file. Match via iso codes.#
AllWOLDdata$glotto=codes.file$glotto[match(AllWOLDdata$iso,codes.file$iso)]#
#
AllWOLDdata$glotto[is.na(AllWOLDdata$glotto)]=codes.file$glotto[match(AllWOLDdata[is.na(AllWOLDdata$glotto),]$Language,codes.file$N1)]#
#Reorder AllWOLDdata column in the right order (borrowed score last)#
AllWOLDdata<-AllWOLDdata[,c("language_pk", "meaning" , "word", "Source","Language","iso","glotto", "borrowed_score" ,"analyzability")]#
write.csv(AllWOLDdata,file="../../Processing/Matched_word_lists/WOLDlist.csv",fileEncoding='utf-8')
try(setwd("U:/Pragmatics/Slonimska/Data/Processing/Matched_word_lists"))#
#
try(setwd("~/Documents/MPI/SemanticsPragmatics/2015Course/Projects/Slonimska/NewAnalysis/Pragmatics_Slonimska/Processing/Matched_word_lists"))#
countWhWords <- function(X){#
  y <- sum(c("when?",'which?','who?','where?','why?','what?','how many?','how much?','how?') %in% X, na.rm=T)#
  if(is.na(y)){ return(0)}#
  return(y)#
}#
whwords<-c("when?",'which?','who?','where?','why?','what?','how many?','how much?','how?')#
IDS<-read.csv("IDSlist.csv", stringsAsFactors=F, fileEncoding='utf-8')#
WOLD<-read.csv("WOLDlist.csv", stringsAsFactors=F, fileEncoding='utf-8')#
SB<-read.csv("SBlist.csv", stringsAsFactors=F, fileEncoding='utf-8')#
#
IDS$analyzability = NA#
SB$analyzability = NA#
Alldata<-rbind(IDS,WOLD,SB)#
Alldata$domain <- floor(Alldata$language_pk)#
write.csv(Alldata,file="Alldata.csv",fileEncoding='utf-8')
rm(list=ls())#
#
library(stringi)#
try(setwd("U:/Pragmatics/Slonimska/Data/Processing/Matched_word_lists"))#
#
try(setwd("~/Documents/MPI/SemanticsPragmatics/2015Course/Projects/Slonimska/NewAnalysis/Pragmatics_Slonimska/Processing/Matched_word_lists"))#
#
Alldata<-read.csv("Alldata.csv", stringsAsFactors=F, fileEncoding='utf-8')
head(Alldata[Alldata$language=="English",])
head(Alldata[Alldata$language=="English" & !is.na(Alldata$language),])
head(Alldata[Alldata$Language=="English" & !is.na(Alldata$Language),])
sum(Alldata[Alldata$Language=="English" & !is.na(Alldata$Language) & is.na(word),])
sum(Alldata$Language=="English" & !is.na(Alldata$Language) & is.na(Alldata$word))
sum(Alldata$Language=="English" & !is.na(Alldata$Language) & nchar(Alldata$word)==0)
Alldata[Alldata$Language=="English" & !is.na(Alldata$Language) & nchar(Alldata$word)==0,]
rm(list=ls())#
#
try(setwd("U:/Pragmatics/Slonimska/Data/RAW_data/WOLD"))#
#
try(setwd("~/Documents/MPI/SemanticsPragmatics/2015Course/Projects/Slonimska/NewAnalysis/Pragmatics_Slonimska/RAW_data/WOLD"))#
covertCelex = function(celex){#
	celex$PhonCLX = gsub("\\.",'',celex$PhonCLX)#
#
	celex = celex[!duplicated(celex$Word),]#
	celex.conv = read.delim("../../Processing/CharacterSubstitutions/CELEX_converstion.tab")#
	for(i in 1:nrow(celex.conv)){#
		celex$PhonCLX = gsub(celex.conv[i,1],celex.conv[i,2],celex$PhonCLX)#
	}#
	celex$PhonCLX = gsub("\\{","a",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\'","",celex$PhonCLX)#
	celex$PhonCLX = gsub('\\"',"",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\$","o",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\+","pf", celex$PhonCLX)#
	celex$PhonCLX = gsub("\\|","o", celex$PhonCLX)#
	celex$PhonCLX = gsub("\\)","a", celex$PhonCLX)#
	celex$PhonCLX = gsub("\\}","ǝ",celex$PhonCLX)	#
	celex$Word = tolower(celex$Word)#
	return(celex)#
}#
AllWOLDdata<-read.csv("word_processed.csv",stringsAsFactors=F,encoding='utf-8')#
#
AllWOLDdata$originalWord = AllWOLDdata$word#
### ENGLISH#
#
celex = read.delim("~/Documents/MPI/CausalGraphs/CELEX_EngWordforms.txt",sep='\\',quote='',stringsAsFactors=F)#
celex = covertCelex(celex)#
#
Lang = "English"#
EnglishWords = AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word#
EnglishWords = tolower(EnglishWords)#
EnglishWords = gsub("^be ","",EnglishWords)#
EnglishWords = gsub("^to ","",EnglishWords)#
EnglishWords = gsub("^to ","",EnglishWords)#
EnglishWords = gsub("\\?","",EnglishWords)#
EnglishWords = gsub(" \\(1\\)","",EnglishWords)#
EnglishWords = gsub(" \\(2\\)","",EnglishWords)#
EnglishWords = gsub(" \\(3\\)","",EnglishWords)#
EnglishWords = gsub("\\)"," ",EnglishWords)#
EnglishWords = gsub("\\("," ",EnglishWords)#
EnglishWords = gsub(" +"," ",EnglishWords)#
EnglishWords = gsub('\\"',"",EnglishWords)#
EnglishWords = gsub("\\'","",EnglishWords)#
EnglishWords = gsub(" $","",EnglishWords)#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word = EnglishWords#
EnglishWords = celex$PhonCLX[match(EnglishWords,celex$Word)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[!is.na(EnglishWords)]  = EnglishWords[!is.na(EnglishWords)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)] = sapply(AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)], function(X){#
	wx = strsplit(X,",")[[1]]#
	bits = sapply(wx,function(Y){#
		x = celex[match(strsplit(Y," ")[[1]],celex$Word),]$PhonCLX#
		return(paste(x[!is.na(x)],collapse=''))#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
})
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language) & nchar(AllWOLDdata$word)==0,]
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language) & nchar(AllWOLDdata$word)==0,]$originalWord
t(AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language) & nchar(AllWOLDdata$word)==0,]$originalWord)
t(t(AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language) & nchar(AllWOLDdata$word)==0,]$originalWord))
for(i in t(t(AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language) & nchar(AllWOLDdata$word)==0,]$originalWord))){print(i)}
unique(unlist(strsplit(AllWOLDdata$word,""))
)
sort(unique(unlist(strsplit(AllWOLDdata$word,""))))
rm(list=ls())#
#
try(setwd("U:/Pragmatics/Slonimska/Data/RAW_data/WOLD"))#
#
try(setwd("~/Documents/MPI/SemanticsPragmatics/2015Course/Projects/Slonimska/NewAnalysis/Pragmatics_Slonimska/RAW_data/WOLD"))#
covertCelex = function(celex){#
	celex$PhonCLX = gsub("\\.",'',celex$PhonCLX)#
#
	celex = celex[!duplicated(celex$Word),]#
	celex.conv = read.delim("../../Processing/CharacterSubstitutions/CELEX_converstion.tab")#
	for(i in 1:nrow(celex.conv)){#
		celex$PhonCLX = gsub(celex.conv[i,1],celex.conv[i,2],celex$PhonCLX)#
	}#
	celex$PhonCLX = gsub("\\{","a",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\'","",celex$PhonCLX)#
	celex$PhonCLX = gsub('\\"',"",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\$","o",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\+","pf", celex$PhonCLX)#
	celex$PhonCLX = gsub("\\|","o", celex$PhonCLX)#
	celex$PhonCLX = gsub("\\)","a", celex$PhonCLX)#
	celex$PhonCLX = gsub("\\}","ǝ",celex$PhonCLX)	#
	celex$Word = tolower(celex$Word)#
	return(celex)#
}#
AllWOLDdata<-read.csv("word_processed.csv",stringsAsFactors=F,encoding='utf-8')#
#
AllWOLDdata$originalWord = AllWOLDdata$word#
### ENGLISH#
#
celex = read.delim("~/Documents/MPI/CausalGraphs/CELEX_EngWordforms.txt",sep='\\',quote='',stringsAsFactors=F)#
celex.extra = read.delim("ExtraEnglishWords.tab",sep='\\',quote='',stringsAsFactors=F)#
celex=rbind(celex,celex.extra)#
celex = covertCelex(celex)
celex = read.delim("~/Documents/MPI/CausalGraphs/CELEX_EngWordforms.txt",sep='\\',quote='',stringsAsFactors=F)#
celex = celex[,c("Word","PhonCLX")]#
celex.extra = read.delim("ExtraEnglishWords.tab",sep='\\',quote='',stringsAsFactors=F)#
celex=rbind(celex,celex.extra)#
celex = covertCelex(celex)
tail(celex)
celex = read.delim("~/Documents/MPI/CausalGraphs/CELEX_EngWordforms.txt",sep='\\',quote='',stringsAsFactors=F)#
celex = celex[,c("Word","PhonCLX")]#
celex.extra = read.delim("ExtraEnglishWords.tab",sep='\t',quote='',stringsAsFactors=F)#
celex=rbind(celex,celex.extra)#
celex = covertCelex(celex)
tail(celex)
celex = read.delim("~/Documents/MPI/CausalGraphs/CELEX_EngWordforms.txt",sep='\\',quote='',stringsAsFactors=F)#
celex = celex[,c("Word","PhonCLX")]#
celex.extra = read.delim("ExtraEnglishWords.tab",sep='\t',quote='',stringsAsFactors=F)#
celex=rbind(celex,celex.extra)#
celex = covertCelex(celex)
tail(celex)
rm(list=ls())#
#
try(setwd("U:/Pragmatics/Slonimska/Data/RAW_data/WOLD"))#
#
try(setwd("~/Documents/MPI/SemanticsPragmatics/2015Course/Projects/Slonimska/NewAnalysis/Pragmatics_Slonimska/RAW_data/WOLD"))#
covertCelex = function(celex){#
	celex$PhonCLX = gsub("\\.",'',celex$PhonCLX)#
#
	celex = celex[!duplicated(celex$Word),]#
	celex.conv = read.delim("../../Processing/CharacterSubstitutions/CELEX_converstion.tab")#
	for(i in 1:nrow(celex.conv)){#
		celex$PhonCLX = gsub(celex.conv[i,1],celex.conv[i,2],celex$PhonCLX)#
	}#
	celex$PhonCLX = gsub("\\{","a",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\'","",celex$PhonCLX)#
	celex$PhonCLX = gsub('\\"',"",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\$","o",celex$PhonCLX)#
	celex$PhonCLX = gsub("\\+","pf", celex$PhonCLX)#
	celex$PhonCLX = gsub("\\|","o", celex$PhonCLX)#
	celex$PhonCLX = gsub("\\)","a", celex$PhonCLX)#
	celex$PhonCLX = gsub("\\}","ǝ",celex$PhonCLX)	#
	celex$Word = tolower(celex$Word)#
	return(celex)#
}#
AllWOLDdata<-read.csv("word_processed.csv",stringsAsFactors=F,encoding='utf-8')#
#
AllWOLDdata$originalWord = AllWOLDdata$word#
### ENGLISH#
#
celex = read.delim("~/Documents/MPI/CausalGraphs/CELEX_EngWordforms.txt",sep='\\',quote='',stringsAsFactors=F)#
celex = celex[,c("Word","PhonCLX")]#
celex.extra = read.delim("ExtraEnglishWords.tab",sep='\t',quote='',stringsAsFactors=F)#
celex=rbind(celex,celex.extra)#
celex = covertCelex(celex)#
#
Lang = "English"#
EnglishWords = AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word#
EnglishWords = tolower(EnglishWords)#
EnglishWords = gsub("^be ","",EnglishWords)#
EnglishWords = gsub("^to ","",EnglishWords)#
EnglishWords = gsub("^to ","",EnglishWords)#
EnglishWords = gsub("\\?","",EnglishWords)#
EnglishWords = gsub(" \\(1\\)","",EnglishWords)#
EnglishWords = gsub(" \\(2\\)","",EnglishWords)#
EnglishWords = gsub(" \\(3\\)","",EnglishWords)#
EnglishWords = gsub("\\)"," ",EnglishWords)#
EnglishWords = gsub("\\("," ",EnglishWords)#
EnglishWords = gsub(" +"," ",EnglishWords)#
EnglishWords = gsub('\\"',"",EnglishWords)#
EnglishWords = gsub("\\'","",EnglishWords)#
EnglishWords = gsub(" $","",EnglishWords)#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word = EnglishWords#
EnglishWords = celex$PhonCLX[match(EnglishWords,celex$Word)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[!is.na(EnglishWords)]  = EnglishWords[!is.na(EnglishWords)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)] = sapply(AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(EnglishWords)], function(X){#
	wx = strsplit(X,",")[[1]]#
	bits = sapply(wx,function(Y){#
		x = celex[match(strsplit(Y," ")[[1]],celex$Word),]$PhonCLX#
		return(paste(x[!is.na(x)],collapse=''))#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
})#
#### Dutch#
#
dcelex = read.delim("Dutch_Celex.txt",sep='\\',quote='',stringsAsFactors=F)#
dcelex = covertCelex(dcelex)#
dcelex = dcelex[nchar(dcelex$PhonCLX)>0,]#
Lang = "Dutch"#
DutchWords = AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word#
DutchWords = tolower(DutchWords)#
DutchWords = gsub("\\?","",DutchWords)#
DutchWords = gsub(" \\(1\\)","",DutchWords)#
DutchWords = gsub(" \\(2\\)","",DutchWords)#
DutchWords = gsub(" \\(3\\)","",DutchWords)#
DutchWords = gsub("\\)"," ",DutchWords)#
DutchWords = gsub("\\("," ",DutchWords)#
DutchWords = gsub(" +"," ",DutchWords)#
DutchWords = gsub('\\"',"",DutchWords)#
DutchWords = gsub("\\'","",DutchWords)#
DutchWords = gsub(" $","",DutchWords)#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word = DutchWords#
DutchWords = dcelex$PhonCLX[match(DutchWords,dcelex$Word)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[!is.na(DutchWords)]  = DutchWords[!is.na(DutchWords)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(DutchWords)] = sapply(AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(DutchWords)], function(X){#
	wx = strsplit(X,",")[[1]]#
	bits = sapply(wx,function(Y){#
		x = dcelex[match(strsplit(Y," ")[[1]],dcelex$Word),]$PhonCLX#
		return(paste(x[!is.na(x)],collapse=''))#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
})#
#####
# German#
gcelex = read.delim("German_Celex.txt",sep='\\',quote='',stringsAsFactors=F)#
gcelex = covertCelex(gcelex)#
gcelex = gcelex[nchar(gcelex$PhonCLX)>0,]#
Lang = "German"#
GermanWords = AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word#
GermanWords = tolower(GermanWords)#
GermanWords = gsub("\\?","",GermanWords)#
GermanWords = gsub(" \\(1\\)","",GermanWords)#
GermanWords = gsub(" \\(2\\)","",GermanWords)#
GermanWords = gsub(" \\(3\\)","",GermanWords)#
GermanWords = gsub("\\)"," ",GermanWords)#
GermanWords = gsub("\\("," ",GermanWords)#
GermanWords = gsub(" +"," ",GermanWords)#
GermanWords = gsub('\\"',"",GermanWords)#
GermanWords = gsub("\\'","",GermanWords)#
GermanWords = gsub(" $","",GermanWords)#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word = GermanWords#
GermanWords = gcelex$PhonCLX[match(GermanWords,gcelex$Word)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[!is.na(GermanWords)]  = GermanWords[!is.na(GermanWords)]#
#
AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(GermanWords)] = sapply(AllWOLDdata[AllWOLDdata$target_language==Lang & !is.na(AllWOLDdata$target_language),]$word[is.na(GermanWords)], function(X){#
	wx = strsplit(X,",")[[1]]#
	bits = sapply(wx,function(Y){#
		x = gcelex[match(strsplit(Y," ")[[1]],gcelex$Word),]$PhonCLX#
		return(paste(x[!is.na(x)],collapse=''))#
		}#
		)#
	if(length(bits[!is.na(bits)])==0){return(NA)}#
	return(paste(bits[!is.na(bits)],collapse=';'))#
})#
write.csv(AllWOLDdata,file="word_processed_transcribed.csv",fileEncoding='utf-8')
rm(list=ls())#
try(setwd("U:/Pragmatics/Slonimska/Data/RAW_data/WOLD"))#
#
try(setwd("~/Documents/MPI/SemanticsPragmatics/2015Course/Projects/Slonimska/NewAnalysis/Pragmatics_Slonimska/RAW_data/WOLD"))#
#Get rid of unnecessary columns#
AllWOLDdata<-read.csv("word_processed_transcribed.csv",stringsAsFactors=F,encoding='utf-8')#
AllWOLDdata$age_score<-NULL#
AllWOLDdata$simplicity_score<-NULL#
AllWOLDdata$borrowed<-NULL#
#AllWOLDdata$analyzability<-NULL#
AllWOLDdata$valueset_pk<-NULL#
AllWOLDdata$counterpart<-NULL#
AllWOLDdata$POS<-NULL#
AllWOLDdata$semantic_field_pk<-NULL#
AllWOLDdata$semantic_field<-NULL#
AllWOLDdata$pk<-NULL#
AllWOLDdata$parameter_pk<-NULL#
AllWOLDdata = AllWOLDdata[!is.na(AllWOLDdata$language_pk),]#
#
AllWOLDdata = AllWOLDdata[AllWOLDdata$word!='Unidentifiable',]#
#Add new column Source that shows the source of the language -WOLD#
AllWOLDdata$Source<-"WOLD"#
#Name column target_language into Language#
AllWOLDdata$Language = AllWOLDdata$target_language#
#Add iso codes to the file. Import file Wold_to_iso.tab#
iso.codes.wold<-read.delim("Wold_to_iso.tab",stringsAsFactors=F,encoding='utf-8')#
#Specify in which column new info goes (AllWOLDdata$iso); equate it to the column from which it takes info (iso.codes.wold$iso);match AllWOLDdata$language_pk to iso.codes.wold$wold.number#
AllWOLDdata$iso=iso.codes.wold$iso[match(AllWOLDdata$language_pk,iso.codes.wold$wold.number)]#
#
AllWOLDdata$language_pk=AllWOLDdata$meaning.id#
#Import Data_clean_up.csv file to get glotto codes.#
#codes.file<-read.delim("../Data_clean_up.csv",sep='\t',stringsAsFactors=F)#
codes.file <- read.csv("../Data_clean_up.csv",stringsAsFactors=F)#
AllWOLDdata$iso[is.na(AllWOLDdata$iso)]=codes.file$iso[match(AllWOLDdata$Language[is.na(AllWOLDdata$iso)],codes.file$N1)]#
#Add glotto codes to the Wold languages in new column by using codes.file. Match via iso codes.#
AllWOLDdata$glotto=codes.file$glotto[match(AllWOLDdata$iso,codes.file$iso)]#
#
AllWOLDdata$glotto[is.na(AllWOLDdata$glotto)]=codes.file$glotto[match(AllWOLDdata[is.na(AllWOLDdata$glotto),]$Language,codes.file$N1)]#
#Reorder AllWOLDdata column in the right order (borrowed score last)#
AllWOLDdata<-AllWOLDdata[,c("language_pk", "meaning" , "word", "Source","Language","iso","glotto", "borrowed_score" ,"analyzability")]#
write.csv(AllWOLDdata,file="../../Processing/Matched_word_lists/WOLDlist.csv",fileEncoding='utf-8')
try(setwd("U:/Pragmatics/Slonimska/Data/Processing/Matched_word_lists"))#
#
try(setwd("~/Documents/MPI/SemanticsPragmatics/2015Course/Projects/Slonimska/NewAnalysis/Pragmatics_Slonimska/Processing/Matched_word_lists"))#
countWhWords <- function(X){#
  y <- sum(c("when?",'which?','who?','where?','why?','what?','how many?','how much?','how?') %in% X, na.rm=T)#
  if(is.na(y)){ return(0)}#
  return(y)#
}#
whwords<-c("when?",'which?','who?','where?','why?','what?','how many?','how much?','how?')#
IDS<-read.csv("IDSlist.csv", stringsAsFactors=F, fileEncoding='utf-8')#
WOLD<-read.csv("WOLDlist.csv", stringsAsFactors=F, fileEncoding='utf-8')#
SB<-read.csv("SBlist.csv", stringsAsFactors=F, fileEncoding='utf-8')#
#
IDS$analyzability = NA#
SB$analyzability = NA#
Alldata<-rbind(IDS,WOLD,SB)#
Alldata$domain <- floor(Alldata$language_pk)#
write.csv(Alldata,file="Alldata.csv",fileEncoding='utf-8')
